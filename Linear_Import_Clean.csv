"ID","Team","Title","Description","Status","Estimate","Priority","Project ID","Project","Creator","Assignee","Labels","Parent issue","Due Date"
"NAV-EPIC-1","NavArch Dev","[EPIC] Phase 1: Hydrostatics MVP (Sprint 1-4)","Complete hydrostatics module with geometry input, computation engine, visualization, and reporting. Target: 8 weeks, 4 sprints.

**Deliverables:**
- Vessel geometry CRUD (CSV import, offsets grid)
- Core hydrostatic calculations (Δ, KB, LCB, GM, coefficients)
- Curves generation (displacement, KB, Bonjean)
- 3D visualization
- PDF/Excel reports
- Validated against rectangular barge (<0.5%) and Wigley hull (<2%)

**Success Metrics:**
- All 12 user stories completed
- Barge tests pass <0.5% error
- Wigley tests pass <2% error
- Compute 40k offsets in <5s
- >80% code coverage","Backlog",40,"Urgent",,,"abhee15@gmail.com",,"Phase 1, MVP, Hydrostatics",""
"NAV-100","NavArch Dev","[Sprint 1] Foundation & Geometry - Week 1-2","**Goals:**
- Database schema & migrations
- Geometry services with validation
- CSV import with error reporting
- Core integration engine
- Frontend: Vessel list, offsets grid

**Acceptance:**
- DB migration applied successfully
- CSV templates downloadable
- Barge geometry imports without errors
- Simpson's Rule passes unit tests","Backlog",34,"Urgent",,,"abhee15@gmail.com",,"Sprint 1, Phase 1","NAV-EPIC-1"
"NAV-101","NavArch Dev","Create database migration for hydrostatics schema","**As a developer**, I need a complete database schema so that I can store vessel geometry and hydrostatic results.

**Tasks:**
- Add Vessel, Station, Waterline, Offset, Loadcase entities
- Add HydroResult, Curve, CurvePoint tables
- Create indexes per phase1 plan (Section 6)
- Add foreign key constraints with CASCADE
- Add soft delete support for Vessels

**Acceptance Criteria:**
- Migration runs without errors
- All 9 tables created in 'data' schema
- Unique constraints on (vessel_id, station_index) and (vessel_id, waterline_index)
- Foreign keys enforce referential integrity
- Can insert sample barge data

**Technical Notes:**
- Use EF Core migrations
- Precision: decimal(10,3) for dimensions, decimal(15,4) for volumes
- JSONB meta columns for extensibility","Backlog",3,"Urgent",,,"abhee15@gmail.com",,"Backend, Database, .NET","NAV-100"
"NAV-102","NavArch Dev","Create IGeometryService interface","**As a developer**, I need a service contract for geometry operations so that I can implement validation and storage logic.

**Interface Methods:**
```csharp
Task<Vessel> CreateVessel(VesselDto dto, CancellationToken ct);
Task<ValidationResult> ValidateOffsets(List<OffsetDto> offsets);
Task<List<Station>> ImportStations(Guid vesselId, List<StationDto> stations, CancellationToken ct);
Task<List<Waterline>> ImportWaterlines(Guid vesselId, List<WaterlineDto> waterlines, CancellationToken ct);
Task<List<Offset>> ImportOffsets(Guid vesselId, List<OffsetDto> offsets, CancellationToken ct);
Task<OffsetsGridDto> GetOffsetsGrid(Guid vesselId, CancellationToken ct);
```

**Acceptance Criteria:**
- Interface defined in Shared/Services
- All methods have proper XML documentation
- Uses CancellationToken for all async operations
- Returns strongly-typed DTOs","Backlog",1,"Urgent",,,"abhee15@gmail.com",,"Backend, .NET, Architecture","NAV-100"
"NAV-103","NavArch Dev","Implement GeometryService with validation","**As a naval architect**, I need geometry validation so that my calculations are trustworthy.

**Validation Rules:**
1. **Monotonic stations**: X values strictly increasing
2. **Monotonic waterlines**: Z values strictly increasing
3. **Non-negative breadths**: All half_breadth_y >= 0
4. **Complete grid**: No missing offsets in (station, waterline) pairs
5. **Unit consistency**: Dimensions in reasonable ranges (Lpp: 1-500m)

**Acceptance Criteria:**
- Validates all 5 rules
- Returns specific error messages with row/column numbers
- Non-monotonic X at row 15 → ""Station X at row 15 (12.5m) < previous (15.0m)""
- Blocks save if validation fails
- Unit tests for each validation rule

**Edge Cases:**
- Single station (valid)
- Duplicate X or Z values (invalid)
- Negative breadths (invalid)","Backlog",5,"Urgent",,,"abhee15@gmail.com",,"Backend, .NET, Validation","NAV-100"
"NAV-104","NavArch Dev","Create CSV parser for offsets import","**As a user**, I can upload CSV/Excel offsets so that I can import geometry from other tools.

**Supported Formats:**
1. **Flat format**: station_index, station_x, waterline_index, waterline_z, half_breadth_y
2. **Separate files**: stations.csv + waterlines.csv + offsets.csv

**Features:**
- Auto-detect format
- Unit inference (m/ft based on values)
- Preview first 10 rows before import
- Detailed error messages (row, column, value)

**Acceptance Criteria:**
- Parses both formats correctly
- Sample CSV with 231 offsets imports in <2s
- Validation errors show exact location
- Handles UTF-8, UTF-8 BOM, Windows-1252 encoding
- Unit tests with malformed CSVs

**Deliverables:**
- CSV template files for both formats","Backlog",5,"Urgent",,,"abhee15@gmail.com",,"Backend, .NET, Parsing","NAV-100"
"NAV-105","NavArch Dev","Create VesselsController with CRUD endpoints","**As a developer**, I need REST endpoints for vessel management.

**Endpoints:**
- POST /api/v1/hydrostatics/vessels
- GET /api/v1/hydrostatics/vessels (list with pagination)
- GET /api/v1/hydrostatics/vessels/{id}
- PUT /api/v1/hydrostatics/vessels/{id}
- DELETE /api/v1/hydrostatics/vessels/{id} (soft delete)

**Acceptance Criteria:**
- All endpoints documented in Swagger
- Returns proper HTTP status codes (201, 200, 404, 400)
- Validates input DTOs with FluentValidation
- Includes correlation IDs in response headers
- Error responses follow consistent format
- Unit tests for each endpoint
- Integration tests with test database

**Request/Response:**
See Phase 1 plan Section 8 for detailed schemas","Backlog",3,"Urgent",,,"abhee15@gmail.com",,"Backend, .NET, API","NAV-100"
"NAV-106","NavArch Dev","Create GeometryController for bulk imports","**As a user**, I can bulk import stations, waterlines, and offsets via API.

**Endpoints:**
- POST /api/v1/hydrostatics/vessels/{id}/stations
- POST /api/v1/hydrostatics/vessels/{id}/waterlines
- POST /api/v1/hydrostatics/vessels/{id}/offsets:bulk
- POST /api/v1/hydrostatics/vessels/{id}/offsets:upload (CSV file)
- GET /api/v1/hydrostatics/vessels/{id}/offsets (get grid)

**Acceptance Criteria:**
- Bulk insert uses EF Core batching
- 231 offsets import in <1s
- Transaction rollback on validation errors
- CSV upload handles multipart/form-data
- Returns import summary (imported count, errors)
- Swagger documentation with examples
- Integration tests with 1000+ offsets","Backlog",3,"Urgent",,,"abhee15@gmail.com",,"Backend, .NET, API","NAV-100"
"NAV-107","NavArch Dev","Create IntegrationEngine utility class","**As a developer**, I need numerical integration methods so that I can compute volumes and moments.

**Methods:**
```csharp
decimal SimpsonsRule(decimal[] y, decimal dx);
decimal CompositeSimpson(decimal[] y, decimal[] x); // irregular spacing
decimal TrapezoidalRule(decimal[] y, decimal dx);
decimal IntegrateIrregular(decimal[] y, decimal[] x); // auto-select method
```

**Acceptance Criteria:**
- Simpson's Rule: exact for cubics
- Handles even and odd number of points
- Falls back to trapezoidal for irregular spacing
- Unit tests with analytical functions (x², x³, sin(x))
- Validates against rectangular barge (error <0.1%)
- Performance: 10,000 points in <10ms
- Well-documented with references (e.g., Chapra & Canale)

**Test Cases:**
- f(x) = x² from 0 to 10 → 333.333...
- f(x) = sin(x) from 0 to π → 2.0","Backlog",3,"Urgent",,,"abhee15@gmail.com",,"Backend, .NET, Algorithm","NAV-100"
"NAV-108","NavArch Dev","Write unit tests for integration methods","**As a QA engineer**, I need validated integration tests so that results are trustworthy.

**Test Suite:**
1. **Analytical functions**: x², x³, sin(x), cos(x)
2. **Rectangular barge**: Volume = L × B × T (exact)
3. **Edge cases**: Single point, two points, empty array
4. **Performance**: 10k points benchmark

**Rectangular Barge Test:**
- L=100m, B=20m, T=5m
- Volume = 10,000 m³ (analytical)
- Simpson's result within 0.1%
- KB = 2.5m (exact)
- BM_t = 6.667m (analytical)

**Acceptance Criteria:**
- All tests pass with >99.5% accuracy for barge
- Test execution time <5s
- 100% code coverage of IntegrationEngine
- Tests use FluentAssertions for readability
- Documented expected values with sources","Backlog",2,"Urgent",,,"abhee15@gmail.com",,"Testing, .NET, Backend","NAV-100"
"NAV-109","NavArch Dev","Frontend: Create Vessels list page","**As a user**, I can see all my vessels and create new ones so that I can manage my projects.

**Components:**
- Vessel card grid (responsive)
- ""+ New Vessel"" button
- Vessel card: name, dimensions, station/waterline count, last modified
- Search/filter by name
- Sort by: name, created, modified

**Create Vessel Modal:**
- Fields: name, description, Lpp, Beam, T_design, units (SI/Imperial)
- Validation: required fields, positive dimensions
- Cancel/Save buttons

**Acceptance Criteria:**
- Loads vessels list on mount
- Creates vessel via API POST
- Navigates to vessel detail on click
- Responsive (mobile, tablet, desktop)
- Loading states for API calls
- Error handling with toast notifications
- Unit tests with React Testing Library","Backlog",3,"Urgent",,,"abhee15@gmail.com",,"Frontend, React, TypeScript","NAV-100"
"NAV-110","NavArch Dev","Frontend: Create Vessel detail page with tabs","**As a user**, I can navigate between vessel modules so that I can access all features.

**Layout:**
- Header: Vessel name, metadata
- Tab navigation: Overview | Geometry | Loadcases | Hydrostatics | Curves | Visualization | Reports
- Tab content area
- Breadcrumbs: Vessels > [Vessel Name] > [Tab]

**Tabs:**
1. Overview: Principal dimensions, statistics
2. Geometry: Stations, Waterlines, Offsets, Import
3. Loadcases: List, Create, Edit
4. Hydrostatics: Compute table, Trim solver
5. Curves: Displacement, KB, LCB, Bonjean
6. Visualization: 2D/3D hull views
7. Reports: Export configuration

**Acceptance Criteria:**
- Tab state persists in URL (/vessels/{id}/geometry)
- Active tab highlighted
- Lazy load tab content
- MobX store for vessel state
- TypeScript strict mode
- Responsive layout","Backlog",5,"Urgent",,,"abhee15@gmail.com",,"Frontend, React, TypeScript","NAV-100"
"NAV-111","NavArch Dev","Frontend: Implement OffsetsGrid component","**As a user**, I can edit an offsets table in a grid so that I can run calculations without leaving the app.

**Features:**
- AG Grid or Handsontable
- Rows: Stations (with X position)
- Columns: Waterlines (with Z position)
- Cells: Half-breadths (editable)
- Paste from Excel preserves structure
- Undo/redo support
- Cell validation (numeric, non-negative)
- Highlight errors in red
- Save button (disabled until changes)

**Acceptance Criteria:**
- Renders 21 stations × 11 waterlines in <500ms
- Cell edit updates in <50ms
- Paste 50 cells works correctly
- Validation shows inline errors
- Save calls bulk import API
- Loading state during save
- Unit tests with mocked data","Backlog",5,"Urgent",,,"abhee15@gmail.com",,"Frontend, React, TypeScript","NAV-100"
"NAV-112","NavArch Dev","Frontend: Create CSV import wizard","**As a user**, I can upload CSV offsets with guidance so that import is easy and error-free.

**Steps:**
1. **Upload**: Drag-drop or file picker
2. **Format Detection**: Auto-detect flat vs. separate
3. **Preview**: Show first 10 rows
4. **Validation**: Run checks, highlight errors
5. **Confirm**: Review summary, import

**Features:**
- Progress indicator
- Download template buttons
- Error list with row/column
- Cancel at any step
- Success message with stats

**Acceptance Criteria:**
- Wizard follows stepper pattern
- CSV validation uses backend API
- Preview renders table correctly
- Error messages are actionable
- Templates download correctly
- Unit tests for each step
- Integration test with sample CSV","Backlog",5,"Urgent",,,"abhee15@gmail.com",,"Frontend, React, TypeScript","NAV-100"
"NAV-113","NavArch Dev","Frontend: Create MobX VesselStore","**As a developer**, I need centralized vessel state management so that UI stays in sync.

**Store Structure:**
```typescript
class VesselStore {
  vessels: Vessel[] = [];
  currentVessel: Vessel | null = null;
  loading: boolean = false;
  error: string | null = null;
  
  // Actions
  async fetchVessels()
  async fetchVessel(id: string)
  async createVessel(dto: VesselDto)
  async updateVessel(id: string, dto: VesselDto)
  async deleteVessel(id: string)
  
  // Computed
  get vesselCount()
  get recentVessels()
}
```

**Acceptance Criteria:**
- MobX 6 with decorators
- Async actions use runInAction
- Error handling with try/catch
- Loading states managed
- TypeScript strict mode
- Unit tests with mock API
- Integrates with React components","Backlog",3,"Urgent",,,"abhee15@gmail.com",,"Frontend, React, MobX","NAV-100"
"NAV-200","NavArch Dev","[Sprint 2] Core Calculations - Week 3-4","**Goals:**
- HydroCalculator service
- All core calculations (volume, KB, LCB, BM, GM, coefficients)
- Loadcase management
- Frontend: Compute UI, results table

**Acceptance:**
- Barge tests pass <0.5% error
- Computes 40k offsets in <5s
- Results table with unit conversion
- All 15 tasks completed","Backlog",40,"Urgent",,,"abhee15@gmail.com",,"Sprint 2, Phase 1","NAV-EPIC-1"
"NAV-201","NavArch Dev","Create IHydroCalculator interface","**As a developer**, I need a calculator service contract so that I can implement hydrostatic computations.

**Interface:**
```csharp
Task<HydroResult> ComputeAtDraft(Guid vesselId, Guid loadcaseId, decimal draft, CancellationToken ct);
Task<List<HydroResult>> ComputeTable(Guid vesselId, Guid loadcaseId, List<decimal> drafts, CancellationToken ct);
Task<SectionalArea[]> ComputeSectionalAreas(Guid vesselId, decimal draft, CancellationToken ct);
Task<WaterplaneProperties> ComputeWaterplane(Guid vesselId, decimal draft, CancellationToken ct);
```

**Acceptance Criteria:**
- Interface in Shared/Services
- XML documentation with formulas
- All methods async with CancellationToken
- Returns domain models (not DTOs)","Backlog",1,"Urgent",,,"abhee15@gmail.com",,"Backend, .NET, Architecture","NAV-200"
"NAV-202","NavArch Dev","Implement sectional area integration","**As a developer**, I need section area calculation so that I can compute volumes.

**Algorithm (per Phase 1, Section 7.1):**
1. For each station_i
2. For each waterline pair (z_j, z_j+1)
3. Trapezoidal integration on half-breadths
4. strip_area = (y_j + y_j+1)/2 * (z_j+1 - z_j)
5. section_area = sum(strips) * 2 (mirror symmetry)

**Acceptance Criteria:**
- Handles irregular waterline spacing
- Returns sectional area per station
- Validates against rectangular section: A = B × T
- Unit tests with analytical shapes
- Performance: 200 stations × 200 waterlines in <100ms
- Documented with diagram","Backlog",3,"Urgent",,,"abhee15@gmail.com",,"Backend, .NET, Algorithm","NAV-200"
"NAV-203","NavArch Dev","Implement volume calculation (∇)","**As a naval architect**, I need displacement volume so that I can compute weight and buoyancy.

**Algorithm:**
- Use Simpson's Rule on sectional areas along stations
- Volume = (dx/3) × (A_0 + 4A_1 + 2A_2 + 4A_3 + ... + A_n)
- Fallback to Trapezoidal for odd number of stations

**Acceptance Criteria:**
- Rectangular barge: V = 100×20×5 = 10,000 m³ (within 0.1%)
- Returns volume in m³
- Handles edge cases (single section, two sections)
- Unit tests with 5 different geometries
- Performance: <50ms for 200 stations
- Logs integration method used","Backlog",2,"Urgent",,,"abhee15@gmail.com",,"Backend, .NET, Algorithm","NAV-200"
"NAV-204","NavArch Dev","Implement center of buoyancy (KB, LCB, TCB)","**As a naval architect**, I need centers of buoyancy so that I can compute stability.

**Formulas (Phase 1, Section 7.3):**
- KB = Σ(z_centroid_i × area_i × dx) / volume
- LCB = Σ(x_i × area_i × dx) / volume  
- TCB = Σ(y_centroid_i × area_i × dx) / volume

**Acceptance Criteria:**
- Rectangular barge: KB = T/2 = 2.5m (exact)
- Rectangular barge: LCB = L/2 = 50m (exact)
- Symmetric hull: TCB = 0.0m (exact)
- Unit tests with barge and wedge sections
- Values in meters from baseline/FP
- Documented coordinate system (X: fwd, Y: port, Z: up)","Backlog",3,"Urgent",,,"abhee15@gmail.com",,"Backend, .NET, Algorithm","NAV-200"
"NAV-205","NavArch Dev","Implement waterplane area (Awp) and second moments (Iwp)","**As a naval architect**, I need waterplane properties so that I can compute metacentric height.

**Calculations:**
1. **Awp**: Area of hull at current waterline (polygon integration)
2. **I_t**: Transverse second moment = ∫y² dA
3. **I_l**: Longitudinal second moment = ∫x² dA

**Acceptance Criteria:**
- Rectangular waterplane: Awp = L × B (exact)
- Rectangular: I_t = L×B³/12 (exact)
- Rectangular: I_l = B×L³/12 (exact)
- Uses Simpson's Rule on station spacing
- Unit tests with 3 shapes (rectangle, triangle, ellipse)
- Performance: <20ms for 200 stations","Backlog",3,"Urgent",,,"abhee15@gmail.com",,"Backend, .NET, Algorithm","NAV-200"
"NAV-206","NavArch Dev","Implement metacentric radius (BMt, BMl)","**As a naval architect**, I need metacentric radius so that I can compute GM.

**Formulas (Phase 1, Section 7.4):**
- BM_t = I_t / volume
- BM_l = I_l / volume

**Acceptance Criteria:**
- Rectangular barge: BM_t = B²/(12×T) = 20²/(12×5) = 6.667m (within 0.5%)
- Returns values in meters
- Unit tests with barge
- Validates inputs (volume > 0)
- Logs warning if BM unreasonably large (>100m)","Backlog",2,"Urgent",,,"abhee15@gmail.com",,"Backend, .NET, Algorithm","NAV-200"
"NAV-207","NavArch Dev","Implement metacentric height (GMt, GMl)","**As a naval architect**, I need GM so that I can assess initial stability.

**Formulas (Phase 1, Section 7.5):**
- KM_t = KB + BM_t
- KM_l = KB + BM_l
- GM_t = KM_t - KG (from loadcase)
- GM_l = KM_l - KG (from loadcase)

**Acceptance Criteria:**
- Uses KG from selected loadcase
- Returns positive/negative GM correctly
- Unit tests with multiple KG values
- Logs warning if GM_t < 0 (unstable)
- Validates KG is reasonable (0 < KG < vessel height)","Backlog",2,"Urgent",,,"abhee15@gmail.com",,"Backend, .NET, Algorithm","NAV-200"
"NAV-208","NavArch Dev","Implement form coefficients (Cb, Cp, Cm, Cwp)","**As a naval architect**, I need form coefficients so that I can assess hull fineness.

**Formulas (Phase 1, Section 7.6):**
- Cb = volume / (Lpp × B × T)
- Cp = volume / (A_midship × Lpp)
- Cm = A_midship / (B × T)
- Cwp = Awp / (Lpp × B)

**Acceptance Criteria:**
- Rectangular barge: all coefficients = 1.0 (exact)
- Validates 0 < coefficient < 1 (warns if outside typical ranges)
- Returns 4 decimal places
- Unit tests with various hull forms
- Logs warning if Cb > 0.9 (very full) or < 0.4 (very fine)","Backlog",2,"Urgent",,,"abhee15@gmail.com",,"Backend, .NET, Algorithm","NAV-200"
"NAV-209","NavArch Dev","Create HydrostaticsController","**As a user**, I can trigger hydrostatic computations via API.

**Endpoints:**
- POST /api/v1/hydrostatics/vessels/{id}/compute/table
- GET /api/v1/hydrostatics/vessels/{id}/results
- GET /api/v1/hydrostatics/vessels/{id}/results/{resultId}

**Request Body (compute/table):**
```json
{
  ""loadcase_id"": ""uuid"",
  ""drafts"": [8.0, 8.5, 9.0, 9.5, 10.0]
}
```

**Acceptance Criteria:**
- Returns results in <5s for 200×200 offsets
- Stores results in database
- Returns computation_time_ms in response
- Error handling for invalid vessel/loadcase IDs
- Swagger documentation
- Integration tests with test vessel","Backlog",3,"Urgent",,,"abhee15@gmail.com",,"Backend, .NET, API","NAV-200"
"NAV-210","NavArch Dev","Create LoadcasesController","**As a user**, I can manage loadcases via API so that I can define operating conditions.

**Endpoints:**
- POST /api/v1/hydrostatics/vessels/{id}/loadcases
- GET /api/v1/hydrostatics/vessels/{id}/loadcases
- GET /api/v1/hydrostatics/loadcases/{loadcaseId}
- PUT /api/v1/hydrostatics/loadcases/{loadcaseId}
- DELETE /api/v1/hydrostatics/loadcases/{loadcaseId}

**Loadcase Fields:**
- name (required)
- rho (water density, kg/m³)
- kg (vertical CG, m)
- notes

**Acceptance Criteria:**
- CRUD operations work correctly
- Validates rho in reasonable range (900-1100 kg/m³)
- Validates KG is positive
- Soft delete not needed (hard delete)
- Returns 404 if vessel doesn't exist
- Integration tests for all endpoints","Backlog",3,"Urgent",,,"abhee15@gmail.com",,"Backend, .NET, API","NAV-200"
"NAV-211","NavArch Dev","Unit tests: All hydrostatic calculations with barge","**As a QA engineer**, I need comprehensive tests so that calculations are validated.

**Test Coverage:**
1. Volume: 10,000 m³ (±0.5%)
2. KB: 2.5m (±0.01m)
3. LCB: 50.0m (±0.01m)
4. TCB: 0.0m (±0.01m)
5. Awp: 2,000 m² (±0.5%)
6. BM_t: 6.667m (±0.5%)
7. BM_l: 166.67m (±0.5%)
8. GM_t: depends on KG (±0.5%)
9. All coefficients: 1.0 (±0.001)

**Test Vessel:**
- Rectangular barge: L=100m, B=20m, T=5m
- 5 stations (0, 25, 50, 75, 100m)
- 3 waterlines (0, 2.5, 5m)
- All half-breadths = 10m

**Acceptance Criteria:**
- All tests pass with stated tolerances
- Tests use xUnit + FluentAssertions
- Test execution <2s
- 100% coverage of HydroCalculator","Backlog",5,"Urgent",,,"abhee15@gmail.com",,"Testing, .NET, Backend","NAV-200"
"NAV-212","NavArch Dev","Frontend: Loadcase management UI","**As a user**, I can create and manage loadcases so that I can define operating conditions.

**Features:**
- Loadcases table (name, rho, KG, actions)
- ""+ New Loadcase"" button
- Edit/Delete actions
- Create/Edit modal with form validation

**Form Fields:**
- Name (required, max 255 chars)
- Water density (rho): number input with unit selector (kg/m³ or lb/ft³)
- KG: number input (m or ft)
- Notes: textarea

**Acceptance Criteria:**
- Lists loadcases for current vessel
- Creates loadcase via API
- Edits loadcase inline or via modal
- Deletes with confirmation dialog
- Form validation (required fields, positive numbers)
- Unit conversion (SI ↔ Imperial)
- Loading states and error handling","Backlog",3,"Urgent",,,"abhee15@gmail.com",,"Frontend, React, TypeScript","NAV-200"
"NAV-213","NavArch Dev","Frontend: Hydrostatic table compute page","**As a user**, I can compute hydrostatic tables so that I can analyze vessel at multiple drafts.

**Layout:**
- Top: Loadcase selector, Units toggle (SI/Imperial)
- Draft Range inputs: Min, Max, Step
- ""Compute Table"" button
- Results table below

**Draft Range:**
- Min draft (m): number input
- Max draft (m): number input  
- Step (m): number input
- Validation: Min < Max, Step > 0

**Acceptance Criteria:**
- Loadcase dropdown populated from API
- Draft inputs validated before compute
- Calls POST /compute/table API
- Shows loading spinner during computation
- Displays results in table component
- Handles errors gracefully
- Unit tests with mocked API","Backlog",3,"Urgent",,,"abhee15@gmail.com",,"Frontend, React, TypeScript","NAV-200"
"NAV-214","NavArch Dev","Frontend: HydroTable component","**As a user**, I can view hydrostatic results in a table so that I can analyze vessel performance.

**Columns:**
- T (draft)
- Δ (displacement weight)
- ∇ (displacement volume)
- KB, LCB, TCB
- BMt, BMl
- GMt, GMl
- Awp
- Cb, Cp, Cm, Cwp

**Features:**
- Sortable columns
- Unit conversion (SI ↔ Imperial)
- Export to CSV button
- Highlight row on hover
- Fixed header on scroll
- Responsive (horizontal scroll on mobile)

**Acceptance Criteria:**
- Renders 100 rows in <300ms
- Sorting works on all columns
- Units update on toggle
- CSV export downloads correctly
- Proper number formatting (3 decimals for m, 1 for tonnes)
- Unit tests with sample data","Backlog",3,"Urgent",,,"abhee15@gmail.com",,"Frontend, React, TypeScript","NAV-200"
"NAV-215","NavArch Dev","Frontend: Loading states and error handling","**As a user**, I see clear feedback during operations so that I know what's happening.

**Loading States:**
- Spinner during API calls
- Skeleton loaders for tables/grids
- Disabled buttons during operations
- Progress bar for long computations

**Error Handling:**
- Toast notifications for errors
- Inline validation errors (forms)
- Retry button on failed API calls
- Clear error messages (no stack traces)

**Acceptance Criteria:**
- All API calls show loading state
- Errors display user-friendly messages
- Network errors handled gracefully
- 404s show ""Not Found"" message
- 500s show ""Server Error"" message
- Toast auto-dismisses after 5s
- Unit tests for error scenarios","Backlog",2,"Urgent",,,"abhee15@gmail.com",,"Frontend, React, TypeScript","NAV-200"
"NAV-300","NavArch Dev","[Sprint 3] Curves & Visualization - Week 5-6","**Goals:**
- Curves generator service
- All curve types (displacement, KB, LCB, Bonjean)
- Frontend: Curves page, charts, 2D/3D visualization

**Acceptance:**
- Curves render in <300ms for 100 points
- 3D view runs at 60fps
- All 13 tasks completed","Backlog",35,"High",,,"abhee15@gmail.com",,"Sprint 3, Phase 1","NAV-EPIC-1"
"NAV-400","NavArch Dev","[Sprint 4] Trim Solver & Reporting - Week 7-8","**Goals:**
- Trim solver (Newton-Raphson)
- Export service (PDF, Excel, CSV, JSON)
- Frontend: Trim solver UI, reports page
- Wigley hull benchmark validation

**Acceptance:**
- Trim solver converges in <10 iterations
- Wigley tests pass <2% error
- PDF reports generated successfully
- All 15 tasks completed
- Phase 1 MVP complete!","Backlog",38,"High",,,"abhee15@gmail.com",,"Sprint 4, Phase 1","NAV-EPIC-1"
"NAV-EPIC-2","NavArch Dev","[EPIC] Phase 2: Resistance & Propulsion","Add Resistance and Propulsion modules with:
- ITTC-1957 friction line
- Holtrop-Mennen total resistance
- B-series propeller performance
- Engine matching
- Cross-module data flow

**Success:** KCS resistance curve within 3-5% of published data","Backlog",50,"Medium",,,"abhee15@gmail.com",,"Phase 2"
"NAV-EPIC-3","NavArch Dev","[EPIC] Phase 3: Seakeeping & 3D Visualization","Add Seakeeping module and enhanced 3D:
- Strip theory RAOs (heave, pitch, roll)
- JONSWAP/PM sea states
- Motion exceedance
- Full 3D hull rendering
- Station/waterline overlays
- Interactive CoB/CoG markers

**Success:** RAO shapes match published references qualitatively","Backlog",45,"Low",,,"abhee15@gmail.com",,"Phase 3"
"NAV-EPIC-4","NavArch Dev","[EPIC] Phase 4: Advanced Stability","Damage stability, tank definitions, weight tree, longitudinal strength

**Features:**
- Compartment definition
- Flooding scenarios
- Damaged stability analysis
- Shear force & bending moment
- Weight management system","Backlog",60,"Low",,,"abhee15@gmail.com",,"Phase 4"
"NAV-EPIC-5","NavArch Dev","[EPIC] Phase 5: Polish & Production","Production-ready features:
- PDF reports with branding
- Advanced benchmarking
- Redis caching
- Background jobs (Hangfire)
- User settings & preferences
- Dark mode
- Keyboard shortcuts
- Performance optimization
- Production deployment

**Success:** Full production deployment with monitoring","Backlog",40,"Medium",,,"abhee15@gmail.com",,"Phase 5"

