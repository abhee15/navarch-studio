name: PR Checks

on:
  pull_request:
    branches: [main, develop]
    paths:
      - "frontend/**"
      - "backend/**"
      - "terraform/**"
      - "database/**"

jobs:
  frontend-checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Build unit-conversion package
        run: |
          cd ../packages/unit-conversion/typescript
          npm ci
          npm run build

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format-check

      - name: Run type check
        run: npm run type-check

      - name: Run tests
        run: npm test -- --coverage --watchAll=false

      - name: Build application
        run: npm run build
        env:
          VITE_API_URL: "https://example.com"
          VITE_COGNITO_USER_POOL_ID: "test-pool"
          VITE_COGNITO_CLIENT_ID: "test-client"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          token: ${{ secrets.CODECOV_TOKEN }}

  backend-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [IdentityService, ApiGateway, DataService]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: dotnet restore backend/${{ matrix.service }}

      - name: Build
        run: dotnet build backend/${{ matrix.service }} --no-restore

      - name: Run tests
        run: dotnet test backend/${{ matrix.service }}.Tests --no-build --verbosity normal --collect:"XPlat Code Coverage"

      - name: Run code analysis
        run: dotnet build backend/${{ matrix.service }} --verbosity normal /p:RunAnalyzersDuringBuild=true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/${{ matrix.service }}.Tests/coverage/coverage.cobertura.xml
          flags: ${{ matrix.service }}
          token: ${{ secrets.CODECOV_TOKEN }}

  terraform-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: [setup, deploy]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.0"

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: ./terraform/${{ matrix.directory }}

      - name: Terraform Init (skip backend for PR checks)
        run: terraform init -backend=false
        working-directory: ./terraform/${{ matrix.directory }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform/${{ matrix.directory }}

  security-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  docker-build-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: IdentityService
            path: backend/IdentityService
          - name: ApiGateway
            path: backend/ApiGateway
          - name: DataService
            path: backend/DataService
          - name: Frontend
            path: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for ${{ matrix.service.name }}
        run: |
          docker build -t ${{ matrix.service.name }}:test ./${{ matrix.service.path }}

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ matrix.service.name }}:test"
          format: "sarif"
          output: "${{ matrix.service.name }}-trivy-results.sarif"

      - name: Upload Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "${{ matrix.service.name }}-trivy-results.sarif"






