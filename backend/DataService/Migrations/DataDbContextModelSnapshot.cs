// <auto-generated />
using System;
using DataService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataService.Migrations
{
    [DbContext(typeof(DataDbContext))]
    partial class DataDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("data")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Shared.Models.Curve", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Meta")
                        .HasColumnType("text")
                        .HasColumnName("meta");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<Guid>("VesselId")
                        .HasColumnType("uuid")
                        .HasColumnName("vessel_id");

                    b.Property<string>("XLabel")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("x_label");

                    b.Property<string>("YLabel")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("y_label");

                    b.HasKey("Id")
                        .HasName("pk_curves");

                    b.HasIndex("VesselId")
                        .HasDatabaseName("ix_curves_vessel_id");

                    b.ToTable("curves", "data");
                });

            modelBuilder.Entity("Shared.Models.CurvePoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CurveId")
                        .HasColumnType("uuid")
                        .HasColumnName("curve_id");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer")
                        .HasColumnName("sequence");

                    b.Property<decimal>("X")
                        .HasColumnType("decimal(15,6)")
                        .HasColumnName("x");

                    b.Property<decimal>("Y")
                        .HasColumnType("decimal(15,6)")
                        .HasColumnName("y");

                    b.HasKey("Id")
                        .HasName("pk_curve_points");

                    b.HasIndex("CurveId", "Sequence")
                        .HasDatabaseName("ix_curve_points_curve_id_sequence");

                    b.ToTable("curve_points", "data");
                });

            modelBuilder.Entity("Shared.Models.HydroResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal?>("Awp")
                        .HasColumnType("decimal(12,4)")
                        .HasColumnName("awp");

                    b.Property<decimal?>("BMl")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("b_ml");

                    b.Property<decimal?>("BMt")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("b_mt");

                    b.Property<decimal?>("Cb")
                        .HasColumnType("decimal(6,4)")
                        .HasColumnName("cb");

                    b.Property<decimal?>("Cm")
                        .HasColumnType("decimal(6,4)")
                        .HasColumnName("cm");

                    b.Property<decimal?>("Cp")
                        .HasColumnType("decimal(6,4)")
                        .HasColumnName("cp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal?>("Cwp")
                        .HasColumnType("decimal(6,4)")
                        .HasColumnName("cwp");

                    b.Property<decimal?>("DispVolume")
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("disp_volume");

                    b.Property<decimal?>("DispWeight")
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("disp_weight");

                    b.Property<decimal>("Draft")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("draft");

                    b.Property<decimal?>("GMl")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("g_ml");

                    b.Property<decimal?>("GMt")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("g_mt");

                    b.Property<decimal?>("Iwp")
                        .HasColumnType("decimal(15,4)")
                        .HasColumnName("iwp");

                    b.Property<decimal?>("KBz")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("k_bz");

                    b.Property<decimal?>("LCBx")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("lc_bx");

                    b.Property<Guid?>("LoadcaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("loadcase_id");

                    b.Property<string>("Meta")
                        .HasColumnType("text")
                        .HasColumnName("meta");

                    b.Property<decimal?>("TCBy")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("tc_by");

                    b.Property<decimal?>("TrimAngle")
                        .HasColumnType("decimal(6,3)")
                        .HasColumnName("trim_angle");

                    b.Property<Guid>("VesselId")
                        .HasColumnType("uuid")
                        .HasColumnName("vessel_id");

                    b.HasKey("Id")
                        .HasName("pk_hydro_results");

                    b.HasIndex("LoadcaseId")
                        .HasDatabaseName("ix_hydro_results_loadcase_id");

                    b.HasIndex("VesselId")
                        .HasDatabaseName("ix_hydro_results_vessel_id");

                    b.ToTable("hydro_results", "data");
                });

            modelBuilder.Entity("Shared.Models.Loadcase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal?>("KG")
                        .HasColumnType("decimal(10,3)")
                        .HasColumnName("kg");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<decimal>("Rho")
                        .HasColumnType("decimal(10,3)")
                        .HasColumnName("rho");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("VesselId")
                        .HasColumnType("uuid")
                        .HasColumnName("vessel_id");

                    b.HasKey("Id")
                        .HasName("pk_loadcases");

                    b.HasIndex("VesselId")
                        .HasDatabaseName("ix_loadcases_vessel_id");

                    b.ToTable("loadcases", "data");
                });

            modelBuilder.Entity("Shared.Models.LoadingConditions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal?>("DeadweightTonnes")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("deadweight_tonnes");

                    b.Property<decimal?>("LightshipTonnes")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("lightship_tonnes");

                    b.Property<Guid>("VesselId")
                        .HasColumnType("uuid")
                        .HasColumnName("vessel_id");

                    b.HasKey("Id")
                        .HasName("pk_loading_conditions");

                    b.HasIndex("VesselId")
                        .IsUnique()
                        .HasDatabaseName("ix_loading_conditions_vessel_id");

                    b.ToTable("loading_conditions", "data");
                });

            modelBuilder.Entity("Shared.Models.MaterialsConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("HullMaterial")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("hull_material");

                    b.Property<string>("SuperstructureMaterial")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("superstructure_material");

                    b.Property<Guid>("VesselId")
                        .HasColumnType("uuid")
                        .HasColumnName("vessel_id");

                    b.HasKey("Id")
                        .HasName("pk_materials_config");

                    b.HasIndex("VesselId")
                        .IsUnique()
                        .HasDatabaseName("ix_materials_config_vessel_id");

                    b.ToTable("materials_config", "data");
                });

            modelBuilder.Entity("Shared.Models.Offset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("HalfBreadthY")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("half_breadth_y");

                    b.Property<int>("StationIndex")
                        .HasColumnType("integer")
                        .HasColumnName("station_index");

                    b.Property<Guid>("VesselId")
                        .HasColumnType("uuid")
                        .HasColumnName("vessel_id");

                    b.Property<int>("WaterlineIndex")
                        .HasColumnType("integer")
                        .HasColumnName("waterline_index");

                    b.HasKey("Id")
                        .HasName("pk_offsets");

                    b.HasIndex("VesselId", "StationIndex", "WaterlineIndex")
                        .IsUnique()
                        .HasDatabaseName("ix_offsets_vessel_id_station_index_waterline_index");

                    b.ToTable("offsets", "data");
                });

            modelBuilder.Entity("Shared.Models.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("StationIndex")
                        .HasColumnType("integer")
                        .HasColumnName("station_index");

                    b.Property<Guid>("VesselId")
                        .HasColumnType("uuid")
                        .HasColumnName("vessel_id");

                    b.Property<decimal>("X")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("x");

                    b.HasKey("Id")
                        .HasName("pk_stations");

                    b.HasIndex("VesselId", "StationIndex")
                        .IsUnique()
                        .HasDatabaseName("ix_stations_vessel_id_station_index");

                    b.ToTable("stations", "data");
                });

            modelBuilder.Entity("Shared.Models.Vessel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Beam")
                        .HasColumnType("decimal(10,3)")
                        .HasColumnName("beam");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("DesignDraft")
                        .HasColumnType("decimal(10,3)")
                        .HasColumnName("design_draft");

                    b.Property<decimal>("Lpp")
                        .HasColumnType("decimal(10,3)")
                        .HasColumnName("lpp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_vessels");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_vessels_user_id");

                    b.ToTable("vessels", "data");
                });

            modelBuilder.Entity("Shared.Models.VesselMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal?>("BlockCoefficient")
                        .HasColumnType("decimal(5,3)")
                        .HasColumnName("block_coefficient");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("HullFamily")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("hull_family");

                    b.Property<string>("Size")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("size");

                    b.Property<Guid>("VesselId")
                        .HasColumnType("uuid")
                        .HasColumnName("vessel_id");

                    b.Property<string>("VesselType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vessel_type");

                    b.HasKey("Id")
                        .HasName("pk_vessel_metadata");

                    b.HasIndex("VesselId")
                        .IsUnique()
                        .HasDatabaseName("ix_vessel_metadata_vessel_id");

                    b.ToTable("vessel_metadata", "data");
                });

            modelBuilder.Entity("Shared.Models.Waterline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("VesselId")
                        .HasColumnType("uuid")
                        .HasColumnName("vessel_id");

                    b.Property<int>("WaterlineIndex")
                        .HasColumnType("integer")
                        .HasColumnName("waterline_index");

                    b.Property<decimal>("Z")
                        .HasColumnType("decimal(10,4)")
                        .HasColumnName("z");

                    b.HasKey("Id")
                        .HasName("pk_waterlines");

                    b.HasIndex("VesselId", "WaterlineIndex")
                        .IsUnique()
                        .HasDatabaseName("ix_waterlines_vessel_id_waterline_index");

                    b.ToTable("waterlines", "data");
                });

            modelBuilder.Entity("Shared.Models.Curve", b =>
                {
                    b.HasOne("Shared.Models.Vessel", "Vessel")
                        .WithMany()
                        .HasForeignKey("VesselId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_curves_vessels_vessel_id");

                    b.Navigation("Vessel");
                });

            modelBuilder.Entity("Shared.Models.CurvePoint", b =>
                {
                    b.HasOne("Shared.Models.Curve", "Curve")
                        .WithMany("Points")
                        .HasForeignKey("CurveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_curve_points_curves_curve_id");

                    b.Navigation("Curve");
                });

            modelBuilder.Entity("Shared.Models.HydroResult", b =>
                {
                    b.HasOne("Shared.Models.Loadcase", "Loadcase")
                        .WithMany("HydroResults")
                        .HasForeignKey("LoadcaseId")
                        .HasConstraintName("fk_hydro_results_loadcases_loadcase_id");

                    b.HasOne("Shared.Models.Vessel", "Vessel")
                        .WithMany("HydroResults")
                        .HasForeignKey("VesselId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_hydro_results_vessels_vessel_id");

                    b.Navigation("Loadcase");

                    b.Navigation("Vessel");
                });

            modelBuilder.Entity("Shared.Models.Loadcase", b =>
                {
                    b.HasOne("Shared.Models.Vessel", "Vessel")
                        .WithMany("Loadcases")
                        .HasForeignKey("VesselId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loadcases_vessels_vessel_id");

                    b.Navigation("Vessel");
                });

            modelBuilder.Entity("Shared.Models.LoadingConditions", b =>
                {
                    b.HasOne("Shared.Models.Vessel", "Vessel")
                        .WithOne("Loading")
                        .HasForeignKey("Shared.Models.LoadingConditions", "VesselId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loading_conditions_vessels_vessel_id");

                    b.Navigation("Vessel");
                });

            modelBuilder.Entity("Shared.Models.MaterialsConfig", b =>
                {
                    b.HasOne("Shared.Models.Vessel", "Vessel")
                        .WithOne("Materials")
                        .HasForeignKey("Shared.Models.MaterialsConfig", "VesselId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_materials_config_vessels_vessel_id");

                    b.Navigation("Vessel");
                });

            modelBuilder.Entity("Shared.Models.Offset", b =>
                {
                    b.HasOne("Shared.Models.Vessel", "Vessel")
                        .WithMany("Offsets")
                        .HasForeignKey("VesselId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_offsets_vessels_vessel_id");

                    b.Navigation("Vessel");
                });

            modelBuilder.Entity("Shared.Models.Station", b =>
                {
                    b.HasOne("Shared.Models.Vessel", "Vessel")
                        .WithMany("Stations")
                        .HasForeignKey("VesselId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stations_vessels_vessel_id");

                    b.Navigation("Vessel");
                });

            modelBuilder.Entity("Shared.Models.VesselMetadata", b =>
                {
                    b.HasOne("Shared.Models.Vessel", "Vessel")
                        .WithOne("Metadata")
                        .HasForeignKey("Shared.Models.VesselMetadata", "VesselId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vessel_metadata_vessels_vessel_id");

                    b.Navigation("Vessel");
                });

            modelBuilder.Entity("Shared.Models.Waterline", b =>
                {
                    b.HasOne("Shared.Models.Vessel", "Vessel")
                        .WithMany("Waterlines")
                        .HasForeignKey("VesselId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_waterlines_vessels_vessel_id");

                    b.Navigation("Vessel");
                });

            modelBuilder.Entity("Shared.Models.Curve", b =>
                {
                    b.Navigation("Points");
                });

            modelBuilder.Entity("Shared.Models.Loadcase", b =>
                {
                    b.Navigation("HydroResults");
                });

            modelBuilder.Entity("Shared.Models.Vessel", b =>
                {
                    b.Navigation("HydroResults");

                    b.Navigation("Loadcases");

                    b.Navigation("Loading");

                    b.Navigation("Materials");

                    b.Navigation("Metadata");

                    b.Navigation("Offsets");

                    b.Navigation("Stations");

                    b.Navigation("Waterlines");
                });
#pragma warning restore 612, 618
        }
    }
}
