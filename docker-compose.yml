services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: sri_template_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres

  identity-service:
    build:
      context: ./backend
      dockerfile: IdentityService/Dockerfile
    ports:
      - "5001:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=sri_template_dev;Username=postgres;Password=postgres
    depends_on:
      postgres:
        condition: service_healthy

  data-service:
    build:
      context: ./backend
      dockerfile: DataService/Dockerfile
    ports:
      - "5003:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=sri_template_dev;Username=postgres;Password=postgres
    depends_on:
      postgres:
        condition: service_healthy

  api-gateway:
    build:
      context: ./backend
      dockerfile: ApiGateway/Dockerfile
    ports:
      - "5002:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Services__IdentityService=http://identity-service:8080
      - Services__DataService=http://data-service:8080
    depends_on:
      - identity-service
      - data-service

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:5002
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api-gateway

volumes:
  postgres_data:





